
<!doctype html>
<html lang="<%= data.DEFAULT_LANG ? 'fa' : 'en' %>" data-lang="<%= data.DEFAULT_LANG ? 'fa' : 'en' %>"
    class="<%= data.enable ? 'rtl' : '' %>">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="refresh" content="5">
    <title>USAGE MONITOR </title>
    <meta property="og:title" content="USAGE MONITOR">
    <meta property="og:description" content="Chenux Usage Monitor">
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdn.jsdelivr.net/gh/rastikerdar/vazirmatn@33.003/Vazirmatn-Variable-font-face.css"
        rel="stylesheet" type="text/css" />
    <script src="https://cdn.jsdelivr.net/npm/jalaali-js/dist/jalaali.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/qrious/4.0.2/qrious.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="shortcut icon" type="x-icon" href="https://chenuka.ggff.net/code.png">
    <script>
        document.addEventListener("contextmenu", (event) => {
           event.preventDefault();
        });
     </script>
    <script type="text/javascript">
		document.onkeydown = function (event) {
		     event = (event || window.event);
		     if (event.keyCode == 123 || event.keyCode == 18)
		     {
		           return false;
		     }
		}
		document.addEventListener('contextmenu', event => event.preventDefault());
	</script>

    <script>
        tailwind.config = {
            theme: {
                extend: {
                    animation: {
                        'gradient': 'gradient 8s linear infinite',
                    },
                    keyframes: {
                        'gradient': {
                            '0%, 100%': {
                                'background-size': '200% 200%',
                                'background-position': 'left center'
                            },
                            '50%': {
                                'background-size': '200% 200%',
                                'background-position': 'right center'
                            }
                        }
                    }
                }
            }
        }
    </script>

    <style>
        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .fade-in {
            animation: fadeIn 0.3s ease-out forwards;
        }

        .glass {
            backdrop-filter: blur(12px);
            -webkit-backdrop-filter: blur(12px);
        }

        body {
            font-family: 'Vazirmatn', sans-serif;
        }

        body.light {
            background: #f3f4f6 !important;
            color: #1f2937 !important;
        }

        body.light .glass {
            background: rgba(255, 255, 255, 0.8) !important;
            border-color: #d1d5db !important;
            color: #1f2937 !important;
        }

        body.light h1,
        body.light h2,
        body.light h3,
        body.light p,
        body.light span {
            color: #1f2937 !important;
        }

        body.light .bg-gradient-to-br {
            background-image: linear-gradient(to bottom right, #f3f4f6, #e5e7eb, #f3f4f6) !important;
        }

        #theme-toggle {
            position: fixed;
            top: 1rem;
            left: 1rem;
            z-index: 50;
            padding: 0.5rem;
            border-radius: 9999px;
            background: rgba(31, 41, 55, 0.5);
            cursor: pointer;
            transition: all 0.3s;
        }

        #theme-toggle:hover {
            background: rgba(31, 41, 55, 0.7);
        }

        .app-button {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            padding: 0.75rem 1.5rem;
            border-radius: 0.75rem;
            transition: all 0.3s;
            background: linear-gradient(to right, rgba(79, 70, 229, 0.8), rgba(109, 40, 217, 0.8));
        }

        .app-button:hover {
            background: linear-gradient(to right, rgba(79, 70, 229, 0.9), rgba(109, 40, 217, 0.9));
            transform: translateY(-2px);
        }
    </style>

    <% function formatBytes(bytes, decimals=2) { if (bytes===0) return '∞' ; const k=1024; const dm=decimals < 0 ? 0 :
        decimals; const sizes=['Bytes', 'KB' , 'MB' , 'GB' , 'TB' , 'PB' , 'EB' , 'ZB' , 'YB' ]; const
        i=Math.floor(Math.log(bytes) / Math.log(k)); return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' +
        sizes[i]; } function getConnectionTitle(link) { if (!link || typeof link !=='string' ) return null; const
        protocolMatch=link.match(/^(vmess|vless|shadowsocks|trojan):\/\//i); const protocol=protocolMatch ?
        protocolMatch[1].toLowerCase() : null; if (protocol==='vmess' ) { try { const
        base64Data=link.split('://')[1].split('#')[0].split('?')[0]; const
        decodedData=JSON.parse(atob(decodeURI(base64Data))); return decodedData.ps || null; } catch (e) {
        alert("خطا در پردازش vmess:", e); return null; } } else { const parts=link.split('#'); if (parts.length
        < 2) return null; let title=parts[1].split('?')[0]; try { title=decodeURIComponent(title); } catch (e) {
        alert(e); } title=title.replace(/[,\-–_]\s*(\d+D)?\s*(\d+H)?\s*(\d+M)?/gi, '' ).trim(); return title ||
        null; } } %>
</head>

<body class="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 text-white p-4 md:p-8">
    <button id="theme-toggle" onclick="toggleTheme()">
        <svg id="theme-icon" xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24"
            stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                d="M12 3v2m0 14v2m9-9h-2M5 12H3m15.364 6.364l-1.414-1.414M6.05 6.05L4.636 4.636m12.728 0L18.364 4.636M6.05 17.95l-1.414 1.414M12 8a4 4 0 100 8 4 4 0 000-8z" />
        </svg>
    </button>

    <div class="max-w-2xl mx-auto space-y-6">
        <!-- Subscription Info Section -->
        <div class="glass bg-gray-800/50 rounded-2xl p-8 text-center border border-gray-700/50 shadow-xl fade-in">
            <div class="relative">
                <div class="absolute inset-0 bg-gradient-to-r from-blue-500/20 to-purple-500/20 rounded-full blur-3xl">
                </div>
                <div class="relative bg-indigo-500/10 p-4 rounded-full inline-flex">
                    <svg class="w-10 h-10 text-indigo-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                    </svg>
                </div>
            </div>
            <h1 class="text-3xl font-bold mt-4 mb-2">Usage Monitor by <a href="https://chenuka.ggff.net">Chenux</a></h1>
            <p class="text-gray-400 text-lg">Usage Of : <%= data.email %>
            
         
        

            </p>
        </div>

        <!-- Stats Grid -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
            <!-- Download -->
            <div class="glass bg-gray-800/50 rounded-xl p-4 border border-gray-700/50 shadow-lg fade-in">
                <div class="flex items-center space-x-3">
                
                    <span class="text-gray-400">Download</span>
                    <svg class="w-5 h-5 text-cyan-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                    </svg>
                </div>
                <p class="text-xl font-semibold mt-2">
                    <%= formatBytes(data.down) %>
                </p>
            </div>

            <!-- Upload -->
            <div class="glass bg-gray-800/50 rounded-xl p-4 border border-gray-700/50 shadow-lg fade-in">
                <div class="flex items-center space-x-3">
                   
                    <span class="text-gray-400">Upload</span>
                    <svg class="w-5 h-5 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12" />
                    </svg>
                </div>
                <p class="text-xl font-semibold mt-2">
                    <%= formatBytes(data.up) %>
                </p>
            </div>

            <!-- Expiry Date -->
            <div class="glass bg-gray-800/50 rounded-xl p-4 border border-gray-700/50 shadow-lg fade-in">
                <div class="flex items-center space-x-3">
                    
                    <span class="text-gray-400">Expiry Date</span>
                    <svg class="w-5 h-5 text-emerald-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                </div>
                <p class="text-xl font-semibold mt-2" id="expireDate">
                    <% 
                    try {
                        if (!data || typeof data.expiryTime === 'undefined') {
                            throw new Error("Data or ExpiryTime Definition.");
                        }
                        const expiryTime = parseInt(data.expiryTime, 10);
                        if (isNaN(expiryTime)) {
                            throw new Error("expiryTime This is a significant number.");
                        }
                        const currentTime = Date.now();                
                        if (expiryTime === 0) {
                            %>
                           No Limit
                            <%
                        } 
                        else if (expiryTime > currentTime) {
                            const remainingDays = Math.floor((expiryTime - currentTime) / (1000 * 60 * 60 * 24));
                            %>
                            <%= remainingDays + ' Days' %>
                            <%
                        } 
                        else {
                            %>
                            expired
                            <%
                        }
                    } catch (error) {
                        alert("Error in Rozhay Baghimandeh’s accounting:", error.message);
                        %>
                       Error
                        <%
                    }
                    %>
                </p>
            </div>
            
        
    

            <!-- Status -->
            <div class="glass bg-gray-800/50 rounded-xl p-4 border border-gray-700/50 shadow-lg fade-in">
                <div class="flex items-center space-x-3">
                   
                    <span class="text-gray-400">Status</span>
                    <svg class="w-5 h-5 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2l4-4" />
                    </svg>
                </div>
                <p class="text-xl font-semibold mt-2" id="status"><%= data.enable ?'Enable': 'Disable' %></p>
            </div>
        </div>
                <!-- Usage Overview -->
                <div class="glass bg-gray-800/50 rounded-xl p-6 border border-gray-700/50 shadow-lg fade-in">
                    <h2 class="text-lg font-semibold mb-4">Usage Overview</h2>
                    <div class="w-full bg-gray-700 rounded-full h-2 mb-4">
                        <div id="usageBar"
                            class="bg-gradient-to-r from-cyan-400 to-indigo-500 h-2 rounded-full transition-all duration-500">
                        </div>
                    </div>
                    <div class="flex justify-between text-sm text-gray-400">
                        <span id="usedText"></span>
                        <span id="remainingText"></span>
                    </div>
                </div>
                
        <div class="glass bg-gray-800/50 rounded-2xl p-8 text-center border border-gray-700/50 shadow-xl fade-in">
            <div class="relative">
                <div class="absolute inset-0 bg-gradient-to-r from-blue-500/20 to-purple-500/20 rounded-full blur-3xl">
                </div>
            </div>

            <p class="text-gray-400 text-lg">Usage Of: <%= data.email %>
            <h3>© Developed by <a href="https://chenuka.ggff.net">Chenuka Sankalpa</a></h3>
        

            </p>
        </div>

   
 
    <script>
        function toggleTheme() {
            document.body.classList.toggle('light');
            const themeButton = document.getElementById('theme-toggle');
            if (document.body.classList.contains('light')) {
                themeButton.innerHTML = `<svg <svg id="theme-icon" xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
          <path d="M17.293 13.293A8 8 0 116.707 2.707 8 8 0 0017.293  13.293z"/>
        </svg>`;
            } else {
                themeButton.innerHTML = `<svg id="theme-icon" xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
            d="M12 3v2m0 14v2m9-9h-2M5 12H3m15.364 6.364l-1.414-1.414M6.05 6.05L4.636 4.636m12.728 0L18.364 4.636M6.05 17.95l-1.414 1.414M12 8a4 4 0 100 8 4 4 0 000-8z" />
        </svg>`;
            }
        }

        function formatBytes(bytes, decimals = 2) {
            if (bytes === 0) return '0 بایت';
            const k = 1024;
            const sizes = ['bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ztabytes', 'gigabytes'];
            const i = Math.floor(Math.log(Math.abs(bytes)) / Math.log(k));
            const result = (Math.abs(bytes) / Math.pow(k, i)).toFixed(decimals);
            return parseFloat(result) * Math.sign(bytes) + ' ' + sizes[i];
        }

       

        const totalByte = parseInt('<%= data.total %>', 10);
        const downloadByte = parseInt('<%= data.down %>', 10);
        const uploadByte = parseInt('<%= data.up %>', 10);
        const usedBytes = downloadByte + uploadByte;
        const remainingBytes = totalByte - usedBytes;

        document.getElementById('usedText').textContent = 'Usage : ' + formatBytes(usedBytes);
        if (totalByte === 0) {
            document.getElementById('remainingText').textContent = 'UNLIMITED: ∞';
            document.getElementById('usageBar').style.width = '100%';
        } else {
            document.getElementById('remainingText').textContent = 'Remaining : ' + formatBytes(remainingBytes);
            const usagePercentage = Math.min(100, (usedBytes / totalByte) * 100);
            document.getElementById('usageBar').style.width = usagePercentage + '%';
        }

        const expireValue = '<%= data.expiryTime %>';
        const expireTimestamp = parseInt(expireValue, 10) * 1000;
        const expireDateElement = document.getElementById('expireDate');

        if (expireValue === '0') {
            expireDateElement.textContent = 'For a while';
        } else {
            const expireDate = new Date(expireTimestamp);
            const gy = expireDate.getFullYear();
            const gm = expireDate.getMonth() + 1;
            const gd = expireDate.getDate();
            const { jy, jm, jd } = jalaali.toJalaali(gy, gm, gd);
            expireDateElement.textContent = `${jy}/${jm}/${jd}`;

            const now = new Date();
            let diff = expireTimestamp - now.getTime();

            let remainingTime = "";
            if (diff > 0) {
                const daysRemaining = Math.floor(diff / (1000 * 60 * 60 * 24));
                if (daysRemaining > 0) {
                    remainingTime = daysRemaining + "Days";
                } else {
                    const hoursRemaining = Math.floor(diff / (1000 * 60 * 60));
                    remainingTime = hoursRemaining + "Hours";
                }
            } else {
                remainingTime = "Time ";
            }

            expireDateElement.textContent += "";

            const remainingTimeElement = document.getElementById('remainingTime');
            if (remainingTimeElement) {
                remainingTimeElement.textContent = remainingTime;
            }
        }

        const statusElement = document.getElementById('status');
        if (totalByte === 0) {
            statusElement.textContent = 'Unlimited';
        } else if (expireTimestamp >= Date.now() && usedBytes <= totalByte) {
            statusElement.textContent = 'Effective';
        } else {
            statusElement.textContent = 'Invalid';
        }

    </script>
    
</body>

</html>
